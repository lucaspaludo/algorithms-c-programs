/*Ainda para a lista do exercício anterior, crie uma função que altera os dados de um nó
especificado pelo usuário.*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

  //criação da lista
  struct aluno {
  char nome [200];
  int idade;
  int media;
  struct aluno* proximo;
 };

  //função imprime lista
  void imprimeLista(struct aluno *ptAluno)
  {
  while(ptAluno!=NULL)
    {
  printf("\n%s ",ptAluno->nome);
  printf("\n%d ",ptAluno->idade);
  printf("\n%d\n ",ptAluno->media);
  ptAluno=ptAluno->proximo;
    }
  }

  //função anexa informações no final da lista
  void anexa(struct aluno **ptCabeca, char *novoNome, int novaIdade, int novaMedia)
  {
  struct aluno *novoAluno = (struct aluno*) malloc(sizeof(struct aluno));
  struct aluno *ultimo = *ptCabeca;
  strcpy(novoAluno->nome,novoNome);
  novoAluno->idade = novaIdade;
  novoAluno->media = novaMedia;
  novoAluno->proximo = NULL;

  if (*ptCabeca == NULL)
  {
  *ptCabeca= novoAluno;
  return;
  }
  while (ultimo->proximo != NULL)
   {
    ultimo = ultimo->proximo;
   }
    ultimo->proximo = novoAluno;
  }

  //função para apagar o nó de uma posição
  void removeData(struct aluno **ptCabeca, int Posicao)
  {
    if (*ptCabeca == NULL) return;
    struct aluno *clear = *ptCabeca;
    if (Posicao == 0)
    {
      *ptCabeca = clear->proximo;
      free(clear);
      return;
    }

  for (int i=0; clear!=NULL && i<Posicao-1; i++)
  clear = clear->proximo;
  if (clear == NULL || clear->proximo == NULL)
  return;
  struct aluno *proximoAluno = clear->proximo->proximo;
  free(clear->proximo);
  clear->proximo = proximoAluno;

  }

  //função para ler um determinado nó da lista
  void leNo(struct aluno **ptCabeca, int Posicao, char *retNome, int *retIdade, float *retMedia )
  {
    if (*ptCabeca == NULL)
  {
    printf("Erro: Lista vazia\n");
    return;
  }
    struct aluno *temp = *ptCabeca;
    for (int i=0; temp!=NULL && i<Posicao; i++)
  {
    temp = temp->proximo;
  }
    if (temp == NULL)
  {
    printf("Erro: Posição inválida\n");
    return;
  }
    strcpy(retNome, temp->nome);
    *retIdade = temp->idade;
    *retMedia = temp->media;
  }

  //função para alterar o nó de uma lista
 void alteraNo(struct aluno **ptCabeca, int Posicao, int novaIdade, char novoNome[200], float novaMedia)
  {
  if (*ptCabeca == NULL)
  {
  printf("Erro: Lista vazia\n");
  return;
  }
  struct aluno *temp = *ptCabeca;
  for (int i=0; temp!=NULL && i<Posicao; i++)
  temp = temp->proximo;
  if (temp == NULL)
  {
  printf("Erro: Posição inválida\n");
  return;
  }
  strcpy(temp->nome, novoNome);
  temp->idade=novaIdade;
  temp->media=novaMedia;
  return;
}



 int main()
 {
  struct aluno* cabeca = NULL;

  anexa(&cabeca, "Freddie",19 ,9);
  anexa(&cabeca, "Jim",68 ,8);
  anexa(&cabeca, "Bruce",72 ,7);
  anexa(&cabeca, "Lucas",44 ,6);
  anexa(&cabeca, "Michael",87 ,5);
 
  removeData(&cabeca, 2);
  imprimeLista(cabeca);

  char n[200];
  int i;
  float m;

  leNo(&cabeca, 0, n, &i, &m);
  printf("__________________________ \n\nNome = %s \n", n);
  printf("Idade = %d \n", i);
  printf("Média = %.2f \n", m);

  char novo[200] = "Parzival";
  int novaI = 18;
  float novaM = 8;

  alteraNo(&cabeca, 2,novaI, novo, novaM);
  printf("__________________________ \n\nNovo nome = %s \n", novo);
  printf("Nova idade = %d \n", novaI);
  printf("Nova média = %.2f \n", novaM);
  imprimeLista(cabeca);

  
  
  


return 0;
}


